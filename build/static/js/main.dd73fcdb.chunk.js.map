{"version":3,"sources":["components/TopicForm.js","actions/topicsAction.js","components/TopicItem.js","components/TopicsContainer.js","App.js","serviceWorker.js","reducers/topicsReducer.js","store/index.js","index.js"],"names":["TopicForm","state","content","modalShown","handleChange","e","_this","setState","Object","defineProperty","target","name","value","handleSubmit","preventDefault","length","props","addTopic","topics","handleModalToggle","this","react_default","a","createElement","Alert","variant","Form","Control","as","rows","style","marginBottom","onChange","Row","Col","md","span","offset","Button","disabled","block","onClick","Modal","show","onHide","Body","Footer","Component","connect","store","dispatch","currentTopics","payload","id","upvote","downvote","sessionStorage","setItem","JSON","stringify","concat","toConsumableArray","type","upvoteTopic","topicIndex","findIndex","topic","downvoteTopic","_ref","index","ListGroup","Item","display","alignItems","ButtonGroup","vertical","className","fa","TopicsContainer","getTopics","sort","b","TopicList","slice","map","i","components_TopicItem","key","getItem","parse","App","Helmet","rel","href","integrity","crossorigin","Container","fluid","components_TopicForm","components_TopicsContainer","Boolean","window","location","hostname","match","initState","Store","createStore","arguments","undefined","action","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dd73fcdb.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {\n  Alert,\n  Form, \n  Button, \n  Row,\n  Col,\n  Modal\n} from 'react-bootstrap';\nimport {connect} from 'react-redux';\nimport {addTopic} from './../actions/topicsAction.js';\n\nclass TopicForm extends Component {\n  state = {\n    content: '',\n    modalShown: false\n  }\n\n  handleChange = e => {\n    // Set the value of content in state from the form\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n  handleSubmit = e => {\n    // prevent button to refresh the page on submit\n    e.preventDefault();\n    // check if \"topic\" character is more than 255\n    if(this.state.content.length > 255){\n      // if it's true then show the alert modal\n      this.setState({modalShown: true})\n    }else{\n      // if it's false then invoke addTopic to dispatch an action\n      // first parameter is content from state as new topic\n      // second parameter is current topics array from redux store\n      this.props.addTopic(this.state.content, this.props.topics)\n      // change the content state into empty to make textArea form become empty on submit\n      this.setState({content: ''})\n    }\n  }\n\n  handleModalToggle = () => {\n    // modal will disappear\n    this.setState({modalShown: false})\n  }\n\n  render(){\n    // maximum length of character for \"topic\"\n    const maxLength = 255;\n    // destructure 'content' from state\n    let {content} = this.state;\n\n    return(\n      <div>\n        {/* I used Alert to wrap the form and give it background color of 'info' from Bootstrap color pallete styling and will turn to 'danger' if content character length is more than 255  */}\n        <Alert variant={content.length <= maxLength ? \"info\" : \"danger\"}>\n          <Form>\n            {/* Form.Control from React-Bootstrap */}\n            <Form.Control \n              name=\"content\"\n              as=\"textarea\" \n              rows=\"3\" \n              value={this.state.content} // subscribe to the value from state\n              style={{marginBottom: '10px'}} // additional styling\n              onChange={this.handleChange} // invoke a function on Change\n              />\n            {/* Row & Col component from react-bootstrap grid */}\n            <Row>\n              <Col md={5}>\n                {/* displayed the amount of \"Topic\" character users typed in the form */}\n                <span>{this.state.content.length} / {maxLength}</span>\n              </Col>\n              <Col md={{ span: 5, offset: 2}}>\n                <Button \n                variant=\"primary\" \n                disabled={content.length > maxLength ? true : false} // disabled the button if the character length is more than 255\n                block\n                onClick={this.handleSubmit} // invoke a funtion on click\n                >\n                  Post \n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        </Alert>\n\n        {/* Modal component from react-bootstrap */}\n        <Modal \n          show={this.state.modalShown} \n          onHide={this.handleModalToggle}>\n          <Modal.Body>\n            The number of Topic characters cannot be more than {maxLength} character!\n          </Modal.Body>\n          <Modal.Footer>\n            <Button \n              variant=\"secondary\"\n              onClick={this.handleModalToggle}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = store => {\n  return {\n    topics: store.topics\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addTopic: (content, currentTopics) => {dispatch(addTopic(content, currentTopics))}\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TopicForm);","export const getTopics = () => {\n  // Check if there is no saved data\n  // then add empty data to sessionStorage\n  if(!sessionStorage.getItem('redditClone')){\n    sessionStorage.setItem('redditClone', JSON.stringify([]))\n  }\n\n  // pass the data from sessionStorage to be an action payload\n  return {\n    type: 'GET_TOPICS',\n    payload: JSON.parse(sessionStorage.getItem('redditClone'))\n  }\n}\n\nexport const addTopic = (content, currentTopics) => {\n  // created new object as new Topic\n  const payload = {\n    // auto incremented id from currectTopics array length\n    id: currentTopics.length + 1,\n    // content value is passed from component\n    content: content,\n    // default upvote & downvote value\n    upvote: 0,\n    downvote: 0\n  }\n\n  // added the object to sessionStorage\n  sessionStorage.setItem('redditClone', JSON.stringify([...currentTopics, payload]))\n\n  // pass the object as a payload to be stored in reducer\n  return {\n    type: 'ADD_TOPIC',\n    payload\n  }\n}\n\nexport const upvoteTopic = (id, currentTopics) => {\n  // find the index of Topic that being selected to upvote inside currentTopics array\n  const topicIndex = currentTopics.findIndex(topic => topic.id == id);\n  // passed the topicIndex to find selected topic\n  // then added 1 to the upvote property inside it \n  currentTopics[topicIndex].upvote += 1;\n\n  // update the current sessionStorage with new currentTopics\n  sessionStorage.setItem('redditClone', JSON.stringify([...currentTopics]))\n\n  // pass the updated currentTopic as a payload\n  return {\n    type: 'UPVOTE_TOPIC',\n    payload: currentTopics\n  }\n}\n\nexport const downvoteTopic = (id, currentTopics) => {\n  // find the index of Topic that being selected to downvote inside currentTopics array\n  const topicIndex = currentTopics.findIndex(topic => topic.id == id);\n  // passed the topicIndex to find selected topic\n  // then added 1 to the downvote property inside it \n  currentTopics[topicIndex].downvote += 1;\n\n  // update the current sessionStorage with new currentTopics\n  sessionStorage.setItem('redditClone', JSON.stringify([...currentTopics]))\n\n  // pass the updated currentTopic as a payload\n  return {\n    type: 'DOWNVOTE_TOPIC',\n    payload: currentTopics\n  }\n}","import React from 'react';\nimport {ListGroup, ButtonGroup, Button} from 'react-bootstrap';\nimport {FaArrowUp, FaArrowDown} from 'react-icons/fa';\nimport {connect} from 'react-redux';\nimport {upvoteTopic, downvoteTopic} from './../actions/topicsAction';\n\nconst TopicItem = ({id, index, content, upvote, downvote, upvoteTopic, downvoteTopic, topics}) => {\n  return(\n    <ListGroup.Item\n      style={{\n        display: 'flex',\n        alignItems: 'center'\n      }}>\n      <h2>{index}</h2>\n      <ButtonGroup vertical className=\"mx-2\">\n        <Button \n          variant=\"outline-success\"\n          onClick={() => upvoteTopic(id, topics)}>\n          <FaArrowUp />\n          <div>{upvote}</div>\n        </Button>\n        <Button \n          variant=\"outline-danger\"\n          onClick={() => downvoteTopic(id, topics)}>\n          <div>{downvote}</div>\n          <FaArrowDown />\n        </Button>\n      </ButtonGroup>\n      <span>{content}</span>\n    </ListGroup.Item>\n  )\n}\n\nconst mapStateToProps = store => {\n  return {\n    topics: store.topics\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    upvoteTopic: (id, topics) => {dispatch(upvoteTopic(id, topics))},\n    downvoteTopic: (id, topics) => {dispatch(downvoteTopic(id, topics))}\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TopicItem)","import React, {Component} from 'react';\nimport {ListGroup} from 'react-bootstrap';\nimport TopicItem from './TopicItem';\nimport {connect} from 'react-redux';\nimport {getTopics} from './../actions/topicsAction';\n\nclass TopicsContainer extends Component {\n\n  // when component already mounted invoke getTopics to dispatch action\n  componentDidMount(){\n    // this function will check if there is already a data in memory\n    this.props.getTopics();\n  }\n\n  render(){\n    // sort the topics based on upvote, descending \n    this.props.topics.sort((a,b) => b.upvote-a.upvote);\n    // slice the top 20 topics\n    // then map the topics data to a TopicItem Component\n    const TopicList = this.props.topics\n      .slice(0, 20)\n      .map((topic,i) => {\n      return(\n        <TopicItem \n          key={topic.id}\n          id={topic.id}\n          index={i+1}\n          content={topic.content}\n          upvote={topic.upvote}\n          downvote={topic.downvote}/>\n      )\n    })\n\n    // conditional rendering if the topics is empty\n    if(this.props.topics.length > 0){\n      return(\n        <ListGroup>\n          {TopicList}\n        </ListGroup>\n        )\n    }else{\n      return(\n        <div>\n          no post yet.\n        </div>\n      )\n    }\n\n  }\n}\n\nconst mapStateToProps = store => {\n  return {\n    topics: store.topics\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getTopics: () => {dispatch(getTopics())}\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TopicsContainer);","import React, { Component } from 'react';\nimport {Helmet} from 'react-helmet';\nimport {Container, Row, Col} from 'react-bootstrap';\nimport TopicForm from './components/TopicForm';\nimport TopicsContainer from './components/TopicsContainer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        {/* React Helmet to edit html head tag */}\n        <Helmet>\n          {/* Change html head title */}\n          <title>Reddit Clone</title>\n          {/* CDN for react-bootstrap styling */}\n          <link\n            rel=\"stylesheet\"\n            href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n            integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n            crossorigin=\"anonymous\"\n          />\n        </Helmet>\n\n        {/* Container component from react-bootstrap */}\n        <Container fluid>\n          <h1>Reddit Clone</h1>\n          {/* Row & Col component from react-bootstrap grid */}\n          <Row>\n            <Col md={4}><TopicForm/></Col>\n            <Col md={8}><TopicsContainer/></Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// set initial state to be empty topics\nconst initState = {\n  topics: []\n}\n\nexport const topicsReducer = (state = initState, action) => {\n  // run when dispatched action type is 'GET_TOPICS'\n  if(action.type === 'GET_TOPICS'){\n    // return dispatched acion payload\n    return {\n      topics: action.payload\n    }  \n  }\n\n  if(action.type === 'ADD_TOPIC'){\n    return {\n      // clone the current state that contains current topic\n      // and added new topic inside dispatced action payload\n      topics: [...state.topics, action.payload]\n    }\n  }\n\n  if(action.type === 'UPVOTE_TOPIC' || action.type === 'DOWNVOTE_TOPIC'){\n    return {\n      // clone the action payload value from dipatched action\n      topics: [...action.payload]\n    }\n  }\n\n  return state\n}","import {createStore} from 'redux';\nimport {topicsReducer} from './../reducers/topicsReducer';\n\nexport const Store = createStore(topicsReducer)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Store} from './store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n  <Provider store={Store}>\n    <App />\n  </Provider>, \n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}